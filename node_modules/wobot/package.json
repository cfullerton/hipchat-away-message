{
  "name": "wobot",
  "version": "0.8.1",
  "description": "A plugin-based HipChat bot.",
  "keywords": [
    "bot",
    "hipchat"
  ],
  "homepage": "http://github.com/cjoudrey/wobot",
  "author": {
    "name": "Christian Joudrey",
    "email": "cmallette@gmail.com",
    "url": "http://twitter.com/cjoudrey"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cjoudrey/wobot.git"
  },
  "dependencies": {
    "node-xmpp": ">= 0.2.7",
    "underscore": ">= 1.1.6"
  },
  "main": "lib/index.js",
  "engines": {
    "node": ">= 0.4.1 < 0.7.0"
  },
  "contributors": [
    {
      "name": "Christian Joudrey",
      "email": "cmallette@gmail.com",
      "url": "http://twitter.com/cjoudrey"
    },
    {
      "name": "Garret Heaton",
      "email": "powdahound@gmail.com",
      "url": "http://powdahound.com"
    },
    {
      "name": "Josh Goodwin",
      "email": "josh.goodwin@ensighten.com",
      "url": "http://www.ensighten.com"
    }
  ],
  "readme": "# wobot\n\nA plugin-based HipChat bot written in Node.js.\n\n# Installation\n\nThe easiest way to obtain Wobot is through [npm](http://npmjs.org/):\n\n    npm install wobot\n\nKeep in mind this module depends on `node-xmpp` which cannot be built without:\n\n - libexpat1-dev: `apt-get install libexpat1-dev`\n - libicu-dev: `apt-get install libicu-dev`\n\n# Your First Bot\n\nInstantiate the `wobot.Bot` class by passing it a hash containing:\n\n  - `jid`: Jabber ID followed by `/bot`\n  - `password`: The account's password\n  - Optional `caps_ver`: Name and version of the bot. Defaults to `Wobot:x.x`.\n  - Optional `debug`: When set to `true`, XMPP traffic will be printed.\n  - Optional `host`: The hostname of the server. Defaults to `jid` host.\n\n```javascript\nvar wobot = require('wobot');\n\nvar bot = new wobot.Bot({\n  jid: '????_????@chat.hipchat.com/bot',\n  password: '??????'\n});\n\nbot.connect();\n```\n\n# Events\n\nThe following events can be binded to:\n\n## onConnect(callback)\nEmitted whenever the bot connects to the server.\n\n## onMessage(condition, callback)\nEmitted whenever a message is sent to a channel the bot is in.\n\n - `condition` is either a RegExp or a string which must match the message for the callback to be triggered.\n - `callback` in the form of `function(channel, from, message[, matches])`.\n\n`condition` can also be omitted i.e. `onMessage(callback)`.\n\n## onPrivateMessage(condition, callback)\nEmitted whenever a message is sent privately to the bot.\n\n - `condition` is either a RegExp or a string which must match the message for the callback to be triggered.\n - `callback` in the form of `function(from, message[, matches])`.\n\n`condition` can also be omitted i.e. `onPrivateMessage(callback)`.\n\n## onInvite(callback)\nEmitted whenever invited to a room.\n\n - `callback` in the form of `function(roomJid, fromJid, reason)`.\n\n## onPing(callback)\nEmitted everytime the bot pings the server (roughly every 30 seconds.)\n\n## onError(callback)\nEmitted whenever an error occurs. `disconnect` will be emitted afterwards.\n\n - `callback` in the form of `function(condition, text, stanza)`\n   - `condition` is a string containing the XMPP stream error condition.\n   - `text` is a string containing a human-readable error message.\n   - `stanza` is an instance of `xmpp.Element`, when available.\n\n## onDisconnect(callback)\nEmitted whenever the bot disconnects from the server.\n\n# Public API\n\nInstances of `wobot.Bot` have the following methods:\n\n## join(roomJid, historyStanzas)\nJoin a channel.\n\n - `roomJid` is in the following format: `????_????@conf.hipchat.com`.\n - `historyStanzas`: Max number of history entries to request (default=0).\n\n## part(roomJid)\nPart a channel.\n\n## message(targetJid, message)\nSend a message to either a channel or a user.\n\n - `targetJid` is in the following format:\n   - `????_????@chat.hipchat.com` for a private message.\n   - `????_????@conf.hipchat.com` for a channel message.\n\n## getRoster(callback)\n\nFetches the roster (buddy list).\n\n - `callback` in the form of `function(err, roster, stanza)`\n   - `err` is a string representation of the error, if any.\n   - `roster` is an array of objects containing user data.\n   - `stanza` is the full response stanza, an `xmpp.Element`.\n\nExample return value for `roster`:\n\n```js\n[\n  { name: 'Christian Joudrey', jid: '1111_12345@chat.hipchat.com', mention_name: 'ChristianJoudrey' },\n  { name: 'The Bot', jid: '1111_12346@chat.hipchat.com', mention_name: 'TheBot' }\n]\n```\n\n## getRooms(callback)\n\nFetches the rooms available to the bot user. This is equivalent to what\nwould show up in the HipChat lobby.\n\n - `callback`: Function to be triggered: `function (err, items, stanza)`\n   - `err`: Error condition (string) if any\n   - `rooms`: Array of objects containing room data\n   - `stanza`: Full response stanza, an `xmpp.Element`\n\n## connect()\nConnect to the server.\n\n## disconnect()\nDisconnect from the server.\n\n## loadPlugin(identifier, plugin, options)\nLoad a plugin.\n\n - `identifier`: A unique string that identifies the plugin. This will be used to unload it.\n - `plugin`: Object with a `load` function as so: `function load (bot)`.\n - `options`: Will be passed as the second argument to `load`.\n\n## sendIq(stanza, callback)\n\nSends an IQ stanza and stores a callback to be called when its response is received.\n\n - `stanza` is the `xmpp.Element` to send.\n - `callback` in the form of `function (err, stanza)`.\n   - `err` is a string representation of the error, if any.\n   - `stanza` is the full response stanza, an `xmpp.Element`.\n\n# Legal stuff\n\nCopyright (c) 2011 Christian Joudrey. See LICENSE for details.\n\nNode.js is an official trademark of Joyent. This module is not formally related to or endorsed by the official Joyent Node.js open source or commercial project.\n",
  "readmeFilename": "README.md",
  "_id": "wobot@0.8.1",
  "dist": {
    "shasum": "8a5901a4e89abc3c19f7b988050f6a9be428d0b3",
    "tarball": "https://registry.npmjs.org/wobot/-/wobot-0.8.1.tgz"
  },
  "_from": "wobot@latest",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "cjoudrey",
    "email": "cmallette@gmail.com"
  },
  "maintainers": [
    {
      "name": "cjoudrey",
      "email": "cmallette@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "8a5901a4e89abc3c19f7b988050f6a9be428d0b3",
  "_resolved": "https://registry.npmjs.org/wobot/-/wobot-0.8.1.tgz",
  "bugs": {
    "url": "https://github.com/cjoudrey/wobot/issues"
  }
}
